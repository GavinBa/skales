#!/bin/sh
#
#  Copyright (c) 2013, The Linux Foundation. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials provided
#        with the distribution.
#      * Neither the name of The Linux Foundation nor the names of its
#        contributors may be used to endorse or promote products derived
#        from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
#  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
#  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

prog=$(basename "$0")
USAGE="$prog <arch> [initrd] [options]

    --base=<NUM>         specify the address the bootloader loads the kernel to
    --cmdline=<cmdline>  override the default command line
    --modules            include modules in ramdisk
"

exe=$(readlink -f "$0")
META_ROOT=$(dirname "$exe")
META_ROOT=$(cd "$META_ROOT" && pwd)

if test -f "$META_ROOT/config.sh"
then
	source "$META_ROOT/config.sh"
fi

die() {
	printf >&2 "%s\n" "$@"
	exit 1
}

usage() {
	die "usage: $USAGE"
}

error() {
	printf >&2 "%s\n" "$@"
	usage
}

if test -z "$1"
then
	usage
fi

image=zImage pagesize=2048 cmdline= base= initrd= needs_fixup= dtb= modules=
target="$1"

case "$target" in
g1 | 7201 | 7201a)
	cmdline="console=ttyMSM2,115200,n8"
	base=0x10000000
	;;
7x30 | 7630 | 7230)
	cmdline="console=ttyMSM1,115200,n8"
	base=0x200000
	pagesize=4096
	;;
8660 | 8x60)
	cmdline="console=hvc0"
	base=0x40200000
	;;
8660dt)
	cmdline="console=ttyMSM0,115200,n8"
	base=0x40800000
	needs_fixup=t
	dtb=msm8660-surf.dtb
	;;
8960)
	cmdline="console=hvc0"
	base=0x80200000
	;;
8960dt)
	cmdline="console=ttyMSM0,115200,n8"
	base=0x86000000 # Put it high to avoid relocation
	needs_fixup=t
	dtb=msm8960-cdp.dtb
	;;
8974)
	cmdline="console=hvc0"
	base=0x00000000
	dtb=msm8974.dtb
	;;
-h|--help)
	usage
	;;
*)
	die "Unknown architecture $1"
	;;
esac

shift

while test $# != 0
do
	case "$1" in
	--cmdline|--cmdline=*)
		case "$#,$1" in
		*,*=*)
			cmdline=`expr "z$1" : 'z-[^=]*=\(.*\)'` ;;
		1,*)
			error "'$1' option missing value" ;;
		*)
			cmdline="$2"
			shift ;;
		esac
		;;
	--base|--base=*)
		case "$#,$1" in
		*,*=*)
			base=`expr "z$1" : 'z-[^=]*=\(.*\)'` ;;
		1,*)
			error "'$1' option missing value" ;;
		*)
			base="$2"
			shift ;;
		esac
		;;
	--modules)
		modules=t
		;;
	*)
		initrd="$1"
		if ! test -e "$initrd"
		then
			initrd="$META_ROOT/initrds/$initrd"
			if ! test -e "$initrd"
			then
				echo >&2 "fatal: can't find initrd"
				echo >&2 "Available initrds:"
				for x in $META_ROOT/initrds/*
				do
					printf >&2 "  %s\n" $(basename "$x")
				done
				exit 1
			fi
		fi
		;;
	esac
	shift
done

(
cd ../kobj &&

if test -n "$modules"
then
	if test -z "$initrd"
	then
		die "Need an initrd to append modules to"
	fi

	rm -rf ../modules/ &&
	INSTALL_MOD_PATH=../modules make-arm modules_install > /dev/null 2>&1 &&
	(
		cd ../modules/ && find . | cpio --quiet -o -H newc
	) | gzip -n -9 > initrd-modules.gz &&
	cat $initrd initrd-modules.gz > initrd.gz
	initrd=initrd.gz
fi

image=arch/arm/boot/$image
initrd=${initrd:-/dev/null}

test -f $image || die "Can't find $image. Build a kernel?"
if test -n "$dtb"
then
	# Older kernels have it in different places
	dbf="arch/arm/boot/dts/$dtb" &&
	test -f $dbf ||
	dbf="arch/arm/boot/$dtb" &&
	test -f $dbf ||
	die "Can't find '$dtb'. Build a device tree blob?"
	dtb="$dbf"
fi

# Compile the atag fixup if necessary
if test -n "$needs_fixup"
then
	fixup="$META_ROOT/atag-fix/fixup"
	${CROSS_COMPILE}gcc -c $fixup.S -o $fixup.o &&
	${CROSS_COMPILE}objcopy -O binary $fixup.o $fixup.bin &&

	cat $fixup.bin $image > fImage &&
	image=fImage || die "Can't build fixup"
fi

# append any blob to the image
if test -n "$dtb"
then
	cat $image $dtb > dImage &&
	image=dImage || die "Can't combine zImage and dtb"
fi

"$META_ROOT/mkbootimg" --kernel $image \
	--ramdisk $initrd \
	--cmdline "$cmdline" \
	--base $base \
	--pagesize $pagesize \
	--output ../boot-$target.img &&
echo "Packaged $(readlink -f ../boot-$target.img)" &&
ln -fs boot-$target.img ../boot.img
)
